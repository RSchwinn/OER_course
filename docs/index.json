[
{
	"uri": "/10-content/01-syllabus/",
	"title": "Course syllabus",
	"tags": [],
	"description": "",
	"content": "The diagram below shows the flow of topics in the course.\nTopic flow\n The table below describes the topics in further detail.\n   Week Unit Name Type Summary    1 Visualizing and Wrangling Data Welcome to Data Science Lecture Overview of class policies; introduction to data science, git, and RStudio cloud  1 Visualizing and Wrangling Data Lab 00: Logistics Lab Overview of lab policies; class survey and pretest; create github and RStudio Cloud accounts  2 Visualizing and Wrangling Data Meet the Toolkit Lecture Introduction to RStudio cloud, R syntax, R Markdown syntax, and version control  2 Visualizing and Wrangling Data Lab 01: Hello R! Lab Working with Rstudio cloud, R, R markdown, and version control  3 Visualizing and Wrangling Data Fundamentals of data \u0026amp; data visualization Lecture Introduction to visualizing numerical and categorical with the ggplot2 package  3 Visualizing and Wrangling Data Reading 01 Reading Examining methods of visualizing numerical and categorical data  3 Visualizing and Wrangling Data Tidy data \u0026amp; data wrangling Lecture Introduction to tidy data, data wrangling, and the dplyr package  3 Visualizing and Wrangling Data Lab 02: Data wrangling and visualization Lab Summarizing data using ggplot2 and dplyr  4 Visualizing and Wrangling Data Merge conflicts Lecture Resolving merge conflicts; practice using git  4 Visualizing and Wrangling Data Tips for effective data visualization Lecture Tips for effective data visualization; presentation by Duke Library’s Data and Visualization Services team  4 Visualizing and Wrangling Data HW 01: Ugly Charts Homework Improving a poor data visualization by using the principles discussed in class  4 Visualizing and Wrangling Data Lab 03: Visualizing spatial data Lab Using spatial data to examine the clustering of Denny’s restaurants and La Quinta hotels; importance of visualizing spatial data (John Snow)  5 Visualizing and Wrangling Data Guest lecture: Hadley Wickham \u0026amp; Jenny Bryan Lecture Skype Q\u0026amp;A with prominent data scientists Hadley Wickham and Jenny Bryan  5 Visualizing and Wrangling Data Review and recap Lecture Review of and further practice with R tidyverse, Rstudio Cloud, git, and github  5 Visualizing and Wrangling Data Lab 04: Wrangling spatial data Lab Working further with the dataset from Lab 03 using new tidyverse functions  6 Visualizing and Wrangling Data Reading 02 Reading Overview of data, data collection, scientific studies, and experimental design  6 Visualizing and Wrangling Data Confounding variables and Simpson’s paradox Lecture Overview of scientific studies, conditiol probability, Simpson’s Paradox, coding style  6 Visualizing and Wrangling Data HW 02: Gotta catch ’em all Homework Visualizing Pokémon Go data and interpreting the results  6 Visualizing and Wrangling Data Midterm 01 Midterm Visualizing and interpeting flight data  6 Visualizing and Wrangling Data Coding style + Data types + Recoding variables Lecture Overview of coding style and data types in R; introduction of more tidyverse functions  6 Visualizing and Wrangling Data Lab 05: Simpson’s paradox Lab Review of Simpson’s Paradox using data from a study on smoking in Whickham, England  7 Making rigorous conclusions Factors + The language of models Lecture Review of factors, introduction to modelling using 18th century Paris art auction data  7 Making rigorous conclusions Reading 03 Reading Introduction to linear models and least squares regression  7 Making rigorous conclusions Formalizing linear models Lecture Introduction to linear modelling and least squares regression in R  7 Making rigorous conclusions Lab 06: Modelling course evaluations Lab Visualizing, modelling, and interpreting course evaluation data  8 Making rigorous conclusions Reading 04 Reading Introduction to multiple regression and model selection in R  8 Making rigorous conclusions Modeling nonlinear relations + Introducing multiple predictors Lecture Introduction to non-linear modelling in R  8 Making rigorous conclusions Multiple linear regression + Model selection Lecture Further work with modelling; introduction to model selection  8 Making rigorous conclusions Lab 07: Modelling course evaluations, Pt 2 Lab Working further with the dataset from Lab 05 using multiple linear regression and model selection  9 Making rigorous conclusions Prediction and model validation Lecture Further work with model selection; model validation and prediction  9 Making rigorous conclusions HW 03: Bike rentals in DC Homework Visualizing, modelling, and interpreting Washington D.C. bike rental data  9 Making rigorous conclusions Estimation via bootstrapping Lecture Introduction to statistical inference, confidence intervals, and bootstrapping  9 Making rigorous conclusions Lab 08: Pulling yourself up by your bootstraps Lab Visualizing, bootstrapping, and interpreting data from the General Social Survey  11 Making rigorous conclusions Reading 05 Reading Hypothesis testing, simulation, and bootstrapping  11 Making rigorous conclusions Hypothesis testing via simulation methods Lecture Hypothesis testing and simulation  11 Making rigorous conclusions Women in Data Science Extra Credit Learn about women in data science and write about your findings  11 Making rigorous conclusions HW 04: You gotta pick a package or two Homework Pick any R package not used in class and do something brief yet meaningful with it, including visualizations and narrative  11 Making rigorous conclusions Inference overview Lecture Inference of hypothesis tests and confidence intervals  11 Making rigorous conclusions Lab: Work on project proposals Lab Working on project proposals  12 Making rigorous conclusions Review of simulation-based inference Lecture Review of homework 3, simulation-based inference  12 Making rigorous conclusions HW 05: Simulate to infer Homework Performing hypothesis tests and confidence intervals on data from the American Community Survey  12 Making rigorous conclusions Reading 06 Reading Central limit theorem, normal distribution, confidence intervals  12 Making rigorous conclusions Central Limit Theorem Lecture Central limit theorem  12 Making rigorous conclusions Lab 09: Simulation based inference Lab Performing and interpreting hypothesis tests with North Carolina births data  13 Making rigorous conclusions Reading 07 Reading 2020 census citizenship question  13 Making rigorous conclusions Central limit theorem based inference Lecture Central limit theorem  13 Making rigorous conclusions Inference for regression Lecture Inference for regression; testing errors  13 Making rigorous conclusions Lab: MT review Lab Working on midterm  13 Making rigorous conclusions Midterm 02 Midterm Interpeting data from the CDC’s National Health and Nutrition Examition Survey using hypothesis testing and linear models  14 Looking ahead Web scraping Lecture Scraping website data for visualization and analysis  14 Looking ahead Functions and automation Lecture Creating user-defined functions for use in web scraping  14 Looking ahead Lab 10: Scrape and analyze Lab Scraping North Carolina brewery data from ratebeer.com for visualization and analysis  15 Looking ahead Interactive data visualization and reporting, Part 1 Lecture Creating shiny apps in R  15 Looking ahead Interactive data visualization and reporting, Part 2 Lecture Creating shiny apps in R  15 Looking ahead HW 06: Scrape and analyze Homework Scraping data from various websites for visualization and analysis  15 Looking ahead Lab: Work on project Lab Working on final project  16 Looking ahead Bayesian inference Lecture Overview of Bayesian inference  16 Looking ahead Text analysis of song lyrics Lecture Using natural language processing techniques on the song lyrics of LDOC performers  16 Looking ahead Project presentations Final Project Giving 6-minute final project presentations and rating the presentations of fellow lab members    "
},
{
	"uri": "/00-hello/",
	"title": "Hello #dsbox",
	"tags": [],
	"description": "",
	"content": "Hello! And welcome!\nLet’s start with setting up an RStudio Cloud workspace for your class, creating a GitHub organization, and the course website. We also discuss alternative setups for a similar course using some or all of the materials provided here.\n"
},
{
	"uri": "/00-hello/01-rscloud/",
	"title": "RStudio Cloud",
	"tags": [],
	"description": "",
	"content": "The RStudio IDE includes a viewable environment, a file browser, data viewer, and a plotting pane, which makes it less intimidating than the bare R shell. Additionally, since it is a full fledged IDE, it also features integrated help, syntax highlighting, and context-aware tab completion, which are all powerful tools that help flatten the learning curve.\nRStudio Cloud is a managed cloud instance of the RStudio IDE. We recommend having students access RStudio via RStudio Cloud as opposed to using a local installation. The main reason for this choice is reducing friction at first exposure to R. Local installation can be difficult to manage, both for the student and the instructor, and can shift the focus away from data science learning at the beginning of the course. In the pedagogical decisions section we discuss in further detail the reasons for avoiding local installation at the beginning of the course and discuss when to introduce it later on in the course.\nWhen you create an account on RStudio Cloud you get a workspace of your own, and the projects you create here are public to RStudio Cloud members. You can also add a new workspace and control its permissions, and the projects you create here can be public or private.\nAll student facing materials for this course have been organized in an RStudio Cloud workspace here. Soon you will have the option to copy that workspace and use it to organize assignments and assessments.\nA natural way to set up a course in RStudio Cloud is using a private workspace. In this structure a classroom (a cohort of students in one semester of the course) maps to a workspace. Once a workspace is set up, instructors can invite students to the workspace via an invite link. Workspaces allow for various permission levels which can be assigned to students, teaching assistants, and instructors. Then, each assignment/project in the course maps to an RStudio Cloud project.\nRStudio Cloud classroom structure\n More detailed information on setting up your course on RStudio Cloud is here.\n"
},
{
	"uri": "/20-tech-stack/01-rscloud/",
	"title": "RStudio Cloud",
	"tags": [],
	"description": "",
	"content": "Setting up your course in RStudio Cloud First, create a new workspace on RStudio Cloud. By default, this new workspace will be a private workspace. All it takes to create a new workspace is a name and brief information for the space. You can update the information once the space is created, however you can’t change the name of the space. For the name,\nI recommend using something along the lines of Course number - Semester.\nCreating a new workspace on RStudio Cloud\n Next step is to invite members to the workspace. You can do this by sending invitations or using a sharing link. I recommend using the latter approach for efficiency. Once all of your students are in the course (or once drop/add period ends) you can change the settings so that additional members cannot join throughout the semester using the sharing link, and can only be added via an invitation from the instructor.\nSetting workspace permissions\n As highlighted in the figure above, when a workspace is set to accept members via a shared link, the owner can also set a default permission level for those entering the workspace via the sharing link. Suggested permission levels and suggestions for mapping to course roles are as follows.\n  RStudio Cloud role Permissions Course role    Admin Manage users, view, edit and manage all projects Instructor  Moderator View, edit and manage all projects Teaching Assistant  Contributor Create, edit and manage their own projects Student  Viewer View projects shared with everyone Auditor, Visitor    This set of permissions will allow instructors full access including management of users. Teaching assistants will be able to peek into student projects, which can ve very useful when helping troubleshoot. Students won’t be able to see each others’ projects. Students auditing your course or visitors, such as colleagues wanting to view/experience your course setup will have limited access.\nRStudio Cloud also allows you to specify who can see the list of members. Admins and moderators can, by default, see all members of the workspace. I prefer to allow contributors (students) to see the list of members and viewers (auditors and visitors) to not since course enrollment information should not be available to non-official members of the course.\n Projects A project in RStudio Cloud is equivalent to an RStudio project. If you are an RStudio user, but you don’t use projects, I highly recommend considering switching your workflow to include projects. You can learn more about them here.\nA new project in RStudio Cloud is a new project in the RStudio IDE\n Access When you create a new project in your workspace, it is by default visible only to you plus the admins and moderators of the space. This default has two advantages:\nIt allows you to develop a project semi-privately and actively decide when the project is ready to be shared with students. This can be especially beneficial when developing an assessment like an exam. It means when a student creates a project in the workspace it’s not, by default, visible to other students.  When your project is ready to be shared with the students in your course, you can adjust the access level by clicking on the gear icon to reveal the settings menu.\nSetting project permissions within a workspace\n  Copying When a student clicks on your shared project, they are notified that this is a temporary copy (with red blinking text), and are given the option to make their own permanent copy of the project. This is the first thing a student should do when they start working on a project.\nWhen a student makes a copy of a project, a new project where they are the owner and that is only visible to them (and the admins and moderators of the space) is created. This copy contains all documents included in the original project and has all the packages installed (but not loaded) as well.\nMaking a copy of a project\n You will see in the above screenshot that the user (on the right) is not the admin of the course. This screenshot was taken when logged into the demo workspace as a student (contributor). I strongly recommend that instructors make a second account for themselves on RStudio Cloud and add that user as a contributor to the workspace to be see what your students see when they log in. It’s a great way to test out functionality and resolve unexpected issues your students might encounter, before they encounter them. I recommend using an incognito browser window for the student account so that you can stay logged in both as a student and as the instructor at the same time and test the student view as you develop content as an instructor.\nOne huge advantage of your students working in RStudio Cloud is that you as the instructor, and anyone with an admin and moderator role, can peek into student projects. While it is important for your students to learn to ask questions in a way that does not depend on someone else being able to see their work directly (and for this I strongly recommend teaching students to make reprexes), it is sometimes, especially early on, nice to be able to peek into a student’s project.\n  Base project template If you consistently use a particular set of packages and/or need a particular set of documents to be included in each project, the base project template functionality will come in very handy. You can use this by defining a base project template for the space. Simply create a new project and add any packages or files you want projects created in the space to start with. After creating your project, select it on the Settings page as the base project template.\nSelecting a base project template\n Note that a project must be shared with everyone in the space in order to be used as a template; only projects which are viewable by everyone in the space will appear in the templates list.\n Git integration It is possible to create (clone) a new project in RStudio Cloud from a GitHub repository, just like in the RStudio IDE.\nCreating a new project from GitHub repository\n If you have a base project template set up for your workspace, this new project created from GitHub will also have the packages installed in the base project template.\nFor more on using Git and GitHub in the classroom, see here.\n Limits Memory Each project on RStudio Cloud is allocated 1 GB of RAM. While this is a pretty generous limit, actions like joining large tables or fitting complicated models could exceed the limit.\nI recommend testing out the any work you assign, especiallty those using large datasets, in order to avoid unexpected hiccups due to out of memory issues. One challenge is that you might have no control over what issues students might run into if they are working on an open ended project using a dataset of their own choice. In these circumstances it’s helpful to keep in the back of your mind that one way an out of memory issue can present itself is with the RStudio Cloud project crashing.\n Users / projects Another limit that you will most likely hit when setting up your course on RStudio Cloud is that each account is allocated one private space, with up to three members and five projects. Once you hit this limit RStudio Cloud will prompt you to submit a request to the RStudio Cloud team for more capacity. Rest assured that this request will be approved.\n  RStudio Cloud is in alpha! RStudio Cloud in alpha. The development team is still adding important features and improving performance, reliability and availability. If you have any questions or feedback, you can reach out on the RStudio Community.\n "
},
{
	"uri": "/10-content/",
	"title": "Course content",
	"tags": [],
	"description": "",
	"content": "An intro on course content section…\n"
},
{
	"uri": "/10-content/02-explore/",
	"title": "Exploring data",
	"tags": [],
	"description": "",
	"content": "Links to materials to be posted here, but they can all be found on the GitHub repo.\n"
},
{
	"uri": "/00-hello/02-github/",
	"title": "Git and GitHub",
	"tags": [],
	"description": "",
	"content": "The use of GitHub also goes a long way to help students visualize and understand the git process which also aids in student buy-in. The web interface allows students to easily view diffs (file changes over time) in files they are collaborating on, keep track of commit histories, and search both the current state as well as the entire history of the code base. Within the classroom GitHub can be thought of as an advanced and flexible learning management system (compared to traditional tools like Blackboard or Sakai).\nAt its most basic, GitHub can be used as a central repository where students turn in their work and where the professor and teaching assistants then collect it and provide feedback. However using this ecosystem for only assignment submission ignores the most compelling features and advantages. In our classes students are expected to push their work in progress throughout the assignment period. This is not enforced explicitly, but rather through the design of the assignments. Most assignments are large scale and team based, meaning no one student can easily complete all the work on their own. In addition, the various tasks within the assignment are interdependent, meaning students are not able to divide up the work and complete each piece individually. This type of design strongly encourages the students to share their work in progress which they are able to do using GitHub. This is also useful to the instructor as it allows for opportunities for observation and feedback through the course of the assignment without forcing students to turn in “drafts”.\nAdditionally, GitHub’s organization and teams features are a natural fit for managing course related tasks. I have used a model where each class has a separate organization to which the students are invited at the beginning of the semester. For most classes the computation components are team based which are then represented by teams within the GitHub organization. This allows for the creation of separate team based repositories along with fine grained access permissions. In general, I have found that using one repository per team per assignment works best. In order to comply with Family Educational Rights and Privacy Act (FERPA) requirements all student repositories are kept private by default, which is possible at no cost thanks to GitHub’s generous academic discount policy. Setup and management for larger classes can be challenging due to the sheer number of components, however most actions can be scripted via the GitHub API which can dramatically reduce the course administrative workload.\nMore detailed information on setting up your course on GitHub is here.\n"
},
{
	"uri": "/20-tech-stack/02-github/",
	"title": "Git and GitHub",
	"tags": [],
	"description": "",
	"content": "There is some placeholder text here, to be fleshed out soon.\nAnd here is a link to ghclass vignette.\nInstructions for assignment getting started and “submission” via Git Here are the steps for getting started:\n Go to the classroom GitHub organization and grab the link of the assignment repo. Start a new RStudio project from Git cloning this repository Make any changes needed as outlined by the tasks you need to complete for the assignment Make sure all your code chunks are informatively named, and these labels are not repeated Periodically commit changes (the more often the better, for example, once per each new task) Push all your changes back to your GitHub repo  and voila, you’re done! Once you push your changes back you do not need to do anything else to “submit” your work. And you can of course push multiple times throughout the assignment. At the time of the deadline we will take whatever is in your repo and consider it your final submission, and grade the state of your work at that time (which means even if you made mistakes before then, you wouldn’t be penalized for them as long as the final state of your work is correct).\n Continuous integration and badges Something new on this homework, and going forward on class assignments. Each time you push to GitHub a continuous integration tool (called wercker) will check to make sure your Rmd knits successfully. If it does, you’ll be able to see a badge on the README of your repo that says “build passing” (in green). If it fails, it’ll say “build failing” (in orange). If the build is failing you will need to fix your Rmd so that it knits without any errors and then push again. Some tips:\n You should avoid leaving your repo in a failing stage. You can click on the “build failing” badge to get more information. A “build passing” badge is not guarantee that your work is correct, but instead just that your Rmd file knits.  lab getting started\n Getting started  Go to the course organization on GitHub: https://github.com/Sta199-S18.\n Find the repo starting with lab-03 and that has your team name at the end (this should be the only lab-03 repo available to you).\n In the repo, click on the green Clone or download button, select Use HTTPS (this might already be selected by default, and if it is, you’ll see the text Clone with HTTPS as in the image below). Click on the clipboard icon to copy the repo URL.\n Go to RStudio Cloud and into the course workspace. Create a New Project from Git Repo. You will need to click on the down arrow next to the New Project button to see this option.\n Copy and paste the URL of your assignment repo into the dialog box:\n Hit OK, and you’re good to go!\n  Also for labs\n Housekeeping Git configuration Your email address is the address tied to your GitHub account and your name should be first and last name.  Go to the Terminal pane Type the following two lines of code, replacing the information in the quotation marks with your info.  git config --global user.email \u0026quot;your email\u0026quot; git config --global user.name \u0026quot;your name\u0026quot; To confirm that the changes have been implemented, run the following:\ngit config --global user.email git config --global user.name  Password caching If you would like your git password cached for a week for this project, type the following in the Terminal:\ngit config --global credential.helper \u0026#39;cache --timeout 604800\u0026#39;  Project name: Currently your project is called Untitled Project. Update the name of your project to be “Lab 05 - Simpson’s paradox”.\n  Warm up Pick one team member to complete the steps in this section while the others contribute to the discussion but do not actually touch the files on their computer.\nBefore we introduce the data, let’s warm up with some simple exercises.\nYAML: Open the R Markdown (Rmd) file in your project, change the author name to your team name, and knit the document.\n Commiting and pushing changes:  Go to the Git pane in your RStudio. View the Diff and confirm that you are happy with the changes. Add a commit message like “Update team name” in the Commit message box and hit Commit. Click on Push. This will prompt a dialogue box where you first need to enter your user name, and then your password.   Pulling changes: Now, the remaining team members who have not been concurrently making these changes on their projects should click on the Pull button in their Git pane and observe that the changes are now reflected on their projects as well.\n  "
},
{
	"uri": "/00-hello/03-blogdown/",
	"title": "Blogdown",
	"tags": [],
	"description": "",
	"content": "A nifty tool for building your course website is blogdown.\nPerhaps the most useful aspect of blogdown in this setting is that your slides, assignments, etc. written in R Markdown can be automatically rendered, so you don’t need to separate knit those documents.\nMore instructions on this are forthcoming, but for the time being, you can use this course website as an example.\n"
},
{
	"uri": "/10-content/03-rigor/",
	"title": "Making rigorous conclusions",
	"tags": [],
	"description": "",
	"content": "Links to materials to be posted here, but they can all be found on the GitHub repo.\n"
},
{
	"uri": "/20-tech-stack/",
	"title": "Technology stack",
	"tags": [],
	"description": "",
	"content": "Intro on tech stack…\n"
},
{
	"uri": "/00-hello/04-alternatives/",
	"title": "Alternative setups",
	"tags": [],
	"description": "",
	"content": "In this section we describe a few alternative setups for your course.\nRStudio access In a course at this level students should access the RStudio IDE through a centralized RStudio server instance, which allows us to provide students with uniform computing environments.\nIt should be noted that the goal isn’t to completely dissuade students from downloading and installing R and RStudio locally, we just don’t want it to be a prerequisite for getting started. Teaching personal setup is best done progressively throughout a semester, usually via one-on-one interactions during office hours or after class. The goal is that all students will be able to continue using R even if they no longer have access to departmental resources.\nIf you prefer to not use RStudio Cloud, you might consider one of the following approaches.\nCentralized RStudio server One approach that might work particularly well for higher level courses that require a shared infrastructure and higher end computational resources is running academically licensed RStudio Server Pro on a powerful server (e.g. 32 cores, 512 GB RAM). If this server is in the department, instructors can be given direct control over all aspects of the computing environment.\nThe figure below is a sketch of the architecture of the centralized RStudio server approach, which shows that students connect to a single RStudio server instance via a departmental login. This works well for upper division and graduate level courses as most students are directly affiliated with the department. Students taking courses who are not affiliated with the department are issued temporary visitor accounts which expire at the end of the semester.\nCentralized RStudio server\n More modest configurations can be more than adequate (e.g., a mid-to-high end desktop) for the vast majority of use cases, however care should be given when working with larger datasets in a shared enviroment. An alternative approach is to use a virtualized hardware in the cloud (e.g. EC2, Azure, etc.).\nThe primary benefit of running and managing the server in-house comes down to control - as needed the instructor(s) are able to install and update software, change configurations, restart or kill sessions, and monitor all aspects of the system. This does increase the demands on the instructor and any involved IT staff, but we have found the benefits to far outweigh the costs. One other unforeseen benefit to a centralized approach is that it makes it possible to present large scale analytical tasks that would not be possible on a traditional desktop or laptop. For example, advanced courses can include homework assignments where students need to process a dataset that is on the order of several hundred gigabytes in size, which would not be possible if they were required to use their own system.\n Dockerized RStudio server A second approach to running RStudio server involves the construction and hosting of a farm of individualized Docker container instances. A sketch of the architecture of the Docker containers is in the figure below, which shows that students authenticate via university login which redirects them to a personal RStudio instance running in a Docker container on either a local or cloud based server.\nDockerized RStudio server\n Docker is a popular and rapidly evolving containerization tool suite that allows users to automate the deployment of software in a repeatable and self-contained way. Each container wraps a portion of the filesystem in such a way that all of the code, runtimes, tools, and libraries needed for a piece of software are available, meaning that software will always run in exactly the same way regardless of the environment in which it is being run. As such, Docker is a powerful tool for reproducible computational research, since every Dockerfile transparently and clearly defines exactly what software and which version is being used for any particular computation task.\nAn additional advantage of Docker containers is that they are similar to virtual machines in that they are sandboxed from one another. By mapping each student to a single container we are able to keep all student processes segregated and enforce strict CPU, memory, and disk usage quotas to avoid accidental disruption of one another’s work.\nHowever Docker containers are generally lighter weight than virtual machines, in terms of system resources used. This makes it feasible to run a large number of containers on a single system at the same time. Since most RStudio usage (particularly by our introductory students) is intermittent, we have found that it is possible to run more than 100 RStudio containers concurrently on a single server. Servers can be run locally or on a cloud-based service. The cost for the latter can be defrayed by the credits many services offer for academic use.\nFurther details of a containerized RStudio server approach implemented at Duke can be found at here. This repository contains a README which explains how the large-scale container farm is set up and also contains the Dockerfiles that are used to create the individual containers.\nImplementing the infrastructure solutions discussed above can be overwhelming and time consuming. We encourage faculty interested in adopting these tools to partner with their departmental and/or university IT professionals. Additionally, building these partnerships can lead to collaborations that benefit the entire university.\n  Not using Git and using RStudio Cloud only…\n "
},
{
	"uri": "/10-content/04-forward/",
	"title": "Looking forward",
	"tags": [],
	"description": "",
	"content": "This part has a bunch of independent modules, each on a different topic. Pick and choose to your liking, depending on how much time you have to cover them.\nLinks to materials to be posted here, but they can all be found on the GitHub repo.\n"
},
{
	"uri": "/30-pedagogy/",
	"title": "Pedagogy",
	"tags": [],
	"description": "",
	"content": "Tips and recommendations for pedagogy to be posted soon.\n"
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/",
	"title": "Data Science Course in a Box",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]